{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\MessageContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MessageContext = /*#__PURE__*/createContext();\nexport const MessageProvider = ({\n  children\n}) => {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [currentConversation, setCurrentConversation] = useState(null);\n  const socket = io('http://localhost:8888');\n  useEffect(() => {\n    // Fetch initial conversations when the component mounts\n    fetch('http://localhost:8888/api/conversations').then(response => response.json()).then(data => setConversations(data)).catch(error => console.error('Failed to fetch conversations:', error));\n  }, []);\n  const startConversation = async otherUserId => {\n    try {\n      const response = await fetch('http://localhost:8888/api/conversations/start', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          otherUserId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok ' + response.statusText);\n      }\n      const newConversation = await response.json();\n      setConversations(prev => [...prev, newConversation]);\n      return newConversation;\n    } catch (error) {\n      console.error('Failed to start conversation:', error);\n      throw error;\n    }\n  };\n  useEffect(() => {\n    socket.on('receiveMessage', ({\n      senderId,\n      message\n    }) => {\n      // Add received message to the appropriate conversation\n      setConversations(prevConversations => {\n        const newConversations = prevConversations.map(conversation => {\n          if (conversation._id === message.conversationId) {\n            // Assuming message has conversationId\n            return {\n              ...conversation,\n              messages: [...conversation.messages, message]\n            };\n          }\n          return conversation;\n        });\n        return newConversations;\n      });\n    });\n    return () => socket.off('receiveMessage');\n  }, []);\n  const sendMessage = ({\n    message,\n    to\n  }) => {\n    socket.emit('sendMessage', {\n      message,\n      to\n    });\n  };\n  const selectConversation = conversationId => {\n    const conversation = conversations.find(c => c._id === conversationId);\n    setCurrentConversation(conversation);\n  };\n  return /*#__PURE__*/_jsxDEV(MessageContext.Provider, {\n    value: {\n      conversations,\n      startConversation,\n      selectConversation,\n      sendMessage,\n      currentConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageProvider, \"5iUe/02HLaRlbGSDFihhOxT73qc=\");\n_c = MessageProvider;\nvar _c;\n$RefreshReg$(_c, \"MessageProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","io","jsxDEV","_jsxDEV","MessageContext","MessageProvider","children","_s","conversations","setConversations","currentConversation","setCurrentConversation","socket","fetch","then","response","json","data","catch","error","console","startConversation","otherUserId","method","headers","body","JSON","stringify","ok","Error","statusText","newConversation","prev","on","senderId","message","prevConversations","newConversations","map","conversation","_id","conversationId","messages","off","sendMessage","to","emit","selectConversation","find","c","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/MessageContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nexport const MessageContext = createContext();\r\n\r\nexport const MessageProvider = ({ children }) => {\r\n    const [conversations, setConversations] = useState([]);\r\n    const [currentConversation, setCurrentConversation] = useState(null);\r\n    const socket = io('http://localhost:8888');\r\n\r\n    useEffect(() => {\r\n        // Fetch initial conversations when the component mounts\r\n        fetch('http://localhost:8888/api/conversations')\r\n            .then(response => response.json())\r\n            .then(data => setConversations(data))\r\n            .catch(error => console.error('Failed to fetch conversations:', error));\r\n    }, []);\r\n\r\n    const startConversation = async (otherUserId) => {\r\n        try {\r\n            const response = await fetch('http://localhost:8888/api/conversations/start', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ otherUserId })\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok ' + response.statusText);\r\n            }\r\n            const newConversation = await response.json();\r\n            setConversations(prev => [...prev, newConversation]);\r\n            return newConversation;\r\n        } catch (error) {\r\n            console.error('Failed to start conversation:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        socket.on('receiveMessage', ({ senderId, message }) => {\r\n            // Add received message to the appropriate conversation\r\n            setConversations(prevConversations => {\r\n                const newConversations = prevConversations.map(conversation => {\r\n                    if (conversation._id === message.conversationId) {  // Assuming message has conversationId\r\n                        return { ...conversation, messages: [...conversation.messages, message] };\r\n                    }\r\n                    return conversation;\r\n                });\r\n                return newConversations;\r\n            });\r\n        });\r\n\r\n        return () => socket.off('receiveMessage');\r\n    }, []);\r\n\r\n    const sendMessage = ({ message, to }) => {\r\n        socket.emit('sendMessage', { message, to });\r\n    };\r\n\r\n    const selectConversation = (conversationId) => {\r\n        const conversation = conversations.find(c => c._id === conversationId);\r\n        setCurrentConversation(conversation);\r\n    };\r\n\r\n    return (\r\n        <MessageContext.Provider value={{ conversations, startConversation, selectConversation, sendMessage, currentConversation }}>\r\n            {children}\r\n        </MessageContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}