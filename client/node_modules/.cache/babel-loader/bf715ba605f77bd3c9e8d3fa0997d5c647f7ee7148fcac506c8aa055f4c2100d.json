{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\MessageContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MessageContext = /*#__PURE__*/createContext();\nexport const MessageProvider = ({\n  children\n}) => {\n  _s();\n  const [currentConversation, setCurrentConversation] = useState(null);\n  const [conversations, setConversations] = useState([]); // Add this line\n  const socket = io('http://localhost:8888');\n  useEffect(() => {\n    socket.on('receiveMessage', message => {\n      // Update the current conversation with the new message if it belongs to the same conversation\n      if (currentConversation && message.conversationId === currentConversation._id) {\n        setCurrentConversation(prev => ({\n          ...prev,\n          messages: [...prev.messages, message]\n        }));\n      }\n      // Optionally update the conversations list if it affects one of the items\n      setConversations(prev => prev.map(convo => {\n        if (convo._id === message.conversationId) {\n          return {\n            ...convo,\n            lastMessage: message\n          }; // You might need to adjust this depending on your data structure\n        }\n        return convo;\n      }));\n    });\n    return () => {\n      socket.off('receiveMessage');\n    };\n  }, [currentConversation, conversations]);\n  const sendMessage = ({\n    message,\n    to\n  }) => {\n    socket.emit('sendMessage', {\n      message,\n      to,\n      conversationId: to\n    });\n  };\n  const fetchConversation = conversationId => {\n    fetch(`http://localhost:8888/api/conversations/${conversationId}`).then(response => response.json()).then(data => {\n      setCurrentConversation(data);\n    }).catch(error => {\n      console.error('Failed to fetch conversation:', error);\n    });\n  };\n\n  // Function to fetch all conversations for a user\n  const fetchConversations = userId => {\n    fetch(`http://localhost:8888/api/conversations/user/${userId}`).then(response => response.json()).then(data => {\n      setConversations(data);\n    }).catch(error => {\n      console.error('Failed to fetch conversations:', error);\n      setConversations([]); // Ensure it is set to an empty array on error\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(MessageContext.Provider, {\n    value: {\n      currentConversation,\n      fetchConversation,\n      sendMessage,\n      setCurrentConversation,\n      conversations,\n      // Provide the conversations list\n      fetchConversations,\n      // Provide the fetching method\n      setConversations // Provide the setter function\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageProvider, \"NGxz29DjmslwiW3WOlMmbZfhg+w=\");\n_c = MessageProvider;\nvar _c;\n$RefreshReg$(_c, \"MessageProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","io","jsxDEV","_jsxDEV","MessageContext","MessageProvider","children","_s","currentConversation","setCurrentConversation","conversations","setConversations","socket","on","message","conversationId","_id","prev","messages","map","convo","lastMessage","off","sendMessage","to","emit","fetchConversation","fetch","then","response","json","data","catch","error","console","fetchConversations","userId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/MessageContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nexport const MessageContext = createContext();\r\n\r\nexport const MessageProvider = ({ children }) => {\r\n    const [currentConversation, setCurrentConversation] = useState(null);\r\n    const [conversations, setConversations] = useState([]);  // Add this line\r\n    const socket = io('http://localhost:8888');\r\n\r\n    useEffect(() => {\r\n        socket.on('receiveMessage', (message) => {\r\n            // Update the current conversation with the new message if it belongs to the same conversation\r\n            if (currentConversation && message.conversationId === currentConversation._id) {\r\n                setCurrentConversation(prev => ({\r\n                    ...prev,\r\n                    messages: [...prev.messages, message]\r\n                }));\r\n            }\r\n            // Optionally update the conversations list if it affects one of the items\r\n            setConversations(prev => prev.map(convo => {\r\n                if (convo._id === message.conversationId) {\r\n                    return { ...convo, lastMessage: message };  // You might need to adjust this depending on your data structure\r\n                }\r\n                return convo;\r\n            }));\r\n        });\r\n\r\n        return () => {\r\n            socket.off('receiveMessage');\r\n        };\r\n    }, [currentConversation, conversations]);\r\n\r\n    const sendMessage = ({ message, to }) => {\r\n        socket.emit('sendMessage', { message, to, conversationId: to });\r\n    };\r\n\r\n    const fetchConversation = (conversationId) => {\r\n        fetch(`http://localhost:8888/api/conversations/${conversationId}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setCurrentConversation(data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Failed to fetch conversation:', error);\r\n            });\r\n    };\r\n\r\n    // Function to fetch all conversations for a user\r\n    const fetchConversations = (userId) => {\r\n        fetch(`http://localhost:8888/api/conversations/user/${userId}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setConversations(data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Failed to fetch conversations:', error);\r\n                setConversations([]);  // Ensure it is set to an empty array on error\r\n            });\r\n    };\r\n\r\n    return (\r\n        <MessageContext.Provider value={{\r\n            currentConversation,\r\n            fetchConversation,\r\n            sendMessage,\r\n            setCurrentConversation,\r\n            conversations,  // Provide the conversations list\r\n            fetchConversations,  // Provide the fetching method\r\n            setConversations  // Provide the setter function\r\n        }}>\r\n            {children}\r\n        </MessageContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}