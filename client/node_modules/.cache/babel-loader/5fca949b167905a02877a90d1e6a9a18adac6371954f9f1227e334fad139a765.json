{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { MessageContext } from './MessageContext';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatRoom({\n  userProfile\n}) {\n  _s();\n  const {\n    conversationId\n  } = useParams();\n  const {\n    currentConversation,\n    setCurrentConversation\n  } = useContext(MessageContext);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const messagesEndRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n\n  // Connect to Socket.IO server and clean up on unmount\n  useEffect(() => {\n    const newSocket = io('http://localhost:8888', {\n      query: {\n        userId: userProfile.userId\n      }\n    });\n    setSocket(newSocket);\n    newSocket.on('receiveMessage', message => {\n      if (message.conversationId === conversationId) {\n        // Update the conversation with the new message\n        setCurrentConversation(prev => ({\n          ...prev,\n          messages: [...prev.messages, message]\n        }));\n      }\n    });\n    return () => {\n      newSocket.off('receiveMessage');\n      newSocket.close();\n    };\n  }, [conversationId, userProfile.userId]);\n\n  // Fetch the specific conversation when the component mounts or the conversationId changes\n  useEffect(() => {\n    if (conversationId) {\n      fetch(`http://localhost:8888/api/conversations/${conversationId}`).then(response => response.json()).then(conversation => {\n        setCurrentConversation(conversation);\n      }).catch(error => console.error('Failed to fetch conversation:', error));\n    }\n  }, [conversationId, setCurrentConversation]);\n\n  // Auto-scroll to the latest message\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation.messages.length]);\n  const handleSendMessage = () => {\n    if (newMessage.trim() !== \"\") {\n      // Emit the message\n      socket.emit('sendMessage', {\n        senderId: userProfile.userId,\n        text: newMessage,\n        conversationId: currentConversation._id\n      });\n\n      // Assume the message will be sent and update UI optimistically\n      setCurrentConversation(prev => ({\n        ...prev,\n        messages: [...prev.messages, {\n          sender: userProfile.userId,\n          text: newMessage,\n          createdAt: new Date()\n        }]\n      }));\n      setNewMessage(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"middle-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Chat with \", (currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation.otherUserDisplayName) || \"User\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), currentConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [currentConversation.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.senderId === userProfile.userId ? 'sent' : 'received'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: msg.senderId === userProfile.userId ? userProfile.profileImage : 'otherUserProfileImage',\n            alt: \"Profile\",\n            className: \"profile-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading conversation or start a new chat...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatRoom, \"6sZ4iRUEieINxjy9RS/5DrJtyfs=\", false, function () {\n  return [useParams];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useRef","useParams","MessageContext","io","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatRoom","userProfile","_s","conversationId","currentConversation","setCurrentConversation","newMessage","setNewMessage","messagesEndRef","socket","setSocket","newSocket","query","userId","on","message","prev","messages","off","close","fetch","then","response","json","conversation","catch","error","console","_messagesEndRef$curre","current","scrollIntoView","behavior","length","handleSendMessage","trim","emit","senderId","text","_id","sender","createdAt","Date","className","children","otherUserDisplayName","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","src","profileImage","alt","ref","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/ChatRoom.js"],"sourcesContent":["import React, { useContext, useEffect, useState, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { MessageContext } from './MessageContext';\r\nimport io from 'socket.io-client';\r\n\r\nfunction ChatRoom({ userProfile }) {\r\n    const { conversationId } = useParams();\r\n    const { currentConversation, setCurrentConversation } = useContext(MessageContext);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const messagesEndRef = useRef(null);\r\n    const [socket, setSocket] = useState(null);\r\n\r\n    // Connect to Socket.IO server and clean up on unmount\r\n    useEffect(() => {\r\n        const newSocket = io('http://localhost:8888', {\r\n            query: { userId: userProfile.userId }\r\n        });\r\n        setSocket(newSocket);\r\n        newSocket.on('receiveMessage', message => {\r\n            if (message.conversationId === conversationId) {\r\n                // Update the conversation with the new message\r\n                setCurrentConversation(prev => ({\r\n                    ...prev,\r\n                    messages: [...prev.messages, message]\r\n                }));\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            newSocket.off('receiveMessage');\r\n            newSocket.close();\r\n        };\r\n    }, [conversationId, userProfile.userId]);\r\n\r\n    // Fetch the specific conversation when the component mounts or the conversationId changes\r\n    useEffect(() => {\r\n        if (conversationId) {\r\n            fetch(`http://localhost:8888/api/conversations/${conversationId}`)\r\n                .then(response => response.json())\r\n                .then(conversation => {\r\n                    setCurrentConversation(conversation);\r\n                })\r\n                .catch(error => console.error('Failed to fetch conversation:', error));\r\n        }\r\n    }, [conversationId, setCurrentConversation]);\r\n\r\n    // Auto-scroll to the latest message\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [currentConversation?.messages.length]);\r\n\r\n    const handleSendMessage = () => {\r\n        if (newMessage.trim() !== \"\") {\r\n            // Emit the message\r\n            socket.emit('sendMessage', {\r\n                senderId: userProfile.userId,\r\n                text: newMessage,\r\n                conversationId: currentConversation._id\r\n            });\r\n    \r\n            // Assume the message will be sent and update UI optimistically\r\n            setCurrentConversation(prev => ({\r\n                ...prev,\r\n                messages: [...prev.messages, { sender: userProfile.userId, text: newMessage, createdAt: new Date() }]\r\n            }));\r\n    \r\n            setNewMessage(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"middle-content\">\r\n            <h1>Chat with {currentConversation?.otherUserDisplayName || \"User\"}</h1>\r\n            {currentConversation ? (\r\n                <>\r\n                    <div className=\"messages\">\r\n                        {currentConversation.messages.map((msg, index) => (\r\n                            <div key={index} className={`message ${msg.senderId === userProfile.userId ? 'sent' : 'received'}`}>\r\n                                <img src={msg.senderId === userProfile.userId ? userProfile.profileImage : 'otherUserProfileImage'} alt=\"Profile\" className=\"profile-image\"/>\r\n                                <p>{msg.text}</p>\r\n                            </div>\r\n                        ))}\r\n                        <div ref={messagesEndRef} />\r\n                    </div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={newMessage}\r\n                        onChange={(e) => setNewMessage(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                        className=\"message-input\"\r\n                    />\r\n                    <button onClick={handleSendMessage} className=\"send-button\">Send</button>\r\n                </>\r\n            ) : (\r\n                <p>Loading conversation or start a new chat...</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}