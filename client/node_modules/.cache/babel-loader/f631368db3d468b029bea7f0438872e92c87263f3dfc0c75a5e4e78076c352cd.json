{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { MessageContext } from './MessageContext';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatRoom({\n  userProfile\n}) {\n  _s();\n  const {\n    conversationId\n  } = useParams();\n  const {\n    currentConversation,\n    setCurrentConversation\n  } = useContext(MessageContext);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const messagesEndRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n  const [otherUserDisplayName, setOtherUserDisplayName] = useState(\"\");\n\n  // Connect to Socket.IO server and clean up on unmount\n  useEffect(() => {\n    const newSocket = io('http://localhost:8888');\n    setSocket(newSocket);\n    newSocket.on('connect', () => {\n      newSocket.emit('register', userProfile.userId);\n    });\n    newSocket.on('receiveMessage', message => {\n      console.log('Received message:', message);\n      if (message.conversationId === conversationId) {\n        // Update the conversation with the new message\n        setCurrentConversation(prev => ({\n          ...prev,\n          messages: [...prev.messages, message]\n        }));\n      }\n    });\n    return () => {\n      newSocket.off('connect');\n      newSocket.off('receiveMessage');\n      newSocket.close();\n    };\n  }, [conversationId, userProfile.userId]);\n\n  // Auto-scroll to the latest message\n  useEffect(() => {\n    if (currentConversation !== null && currentConversation !== void 0 && currentConversation.messages.length) {\n      var _messagesEndRef$curre;\n      (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation.messages]);\n  const handleSendMessage = () => {\n    if (newMessage.trim() !== \"\") {\n      socket.emit('sendMessage', {\n        senderId: userProfile.userId,\n        senderDisplayName: userProfile.displayName,\n        text: newMessage,\n        conversationId: currentConversation._id\n      });\n      setCurrentConversation(prev => ({\n        ...prev,\n        messages: [...prev.messages, {\n          sender: userProfile.userId,\n          senderDisplayName: userProfile.displayName,\n          text: newMessage,\n          createdAt: new Date()\n        }]\n      }));\n      setNewMessage(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"middle-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Chat with \", otherUserDisplayName || \"User\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), currentConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [currentConversation.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender === userProfile.userId ? 'sent' : 'received'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [msg.senderDisplayName, \": \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 37\n            }, this), msg.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading conversation or start a new chat...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatRoom, \"H/8MAXiKkoo7ta1mAcU5E5Ihpbg=\", false, function () {\n  return [useParams];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useRef","useParams","MessageContext","io","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatRoom","userProfile","_s","conversationId","currentConversation","setCurrentConversation","newMessage","setNewMessage","messagesEndRef","socket","setSocket","otherUserDisplayName","setOtherUserDisplayName","newSocket","on","emit","userId","message","console","log","prev","messages","off","close","length","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","senderId","senderDisplayName","displayName","text","_id","sender","createdAt","Date","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","ref","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/ChatRoom.js"],"sourcesContent":["import React, { useContext, useEffect, useState, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { MessageContext } from './MessageContext';\r\nimport io from 'socket.io-client';\r\n\r\nfunction ChatRoom({ userProfile }) {\r\n    const { conversationId } = useParams();\r\n    const { currentConversation, setCurrentConversation } = useContext(MessageContext);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const messagesEndRef = useRef(null);\r\n    const [socket, setSocket] = useState(null);\r\n    const [otherUserDisplayName, setOtherUserDisplayName] = useState(\"\");\r\n\r\n    // Connect to Socket.IO server and clean up on unmount\r\n    useEffect(() => {\r\n        const newSocket = io('http://localhost:8888');\r\n        setSocket(newSocket);\r\n\r\n        newSocket.on('connect', () => {\r\n            newSocket.emit('register', userProfile.userId);\r\n        });\r\n\r\n        newSocket.on('receiveMessage', message => {\r\n            console.log('Received message:', message);\r\n            if (message.conversationId === conversationId) {\r\n                // Update the conversation with the new message\r\n                setCurrentConversation(prev => ({\r\n                    ...prev,\r\n                    messages: [...prev.messages, message]\r\n                }));\r\n            }\r\n        });\r\n        \r\n        return () => {\r\n            newSocket.off('connect');\r\n            newSocket.off('receiveMessage');\r\n            newSocket.close();\r\n        };\r\n    }, [conversationId, userProfile.userId]);\r\n\r\n    \r\n\r\n    // Auto-scroll to the latest message\r\n    useEffect(() => {\r\n        if (currentConversation?.messages.length) {\r\n            messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [currentConversation?.messages]);\r\n\r\n    const handleSendMessage = () => {\r\n        if (newMessage.trim() !== \"\") {\r\n            socket.emit('sendMessage', {\r\n                senderId: userProfile.userId,\r\n                senderDisplayName: userProfile.displayName,\r\n                text: newMessage,\r\n                conversationId: currentConversation._id\r\n            });\r\n\r\n            \r\n            setCurrentConversation(prev => ({\r\n                ...prev,\r\n                messages: [...prev.messages, {\r\n                    sender: userProfile.userId, senderDisplayName: userProfile.displayName, text: newMessage, createdAt: new Date()\r\n                }]\r\n            }));\r\n\r\n            setNewMessage(\"\");\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"middle-content\">\r\n            <h1>Chat with {otherUserDisplayName || \"User\"}</h1>\r\n            {currentConversation ? (\r\n                <>\r\n                    <div className=\"messages\">\r\n                        {currentConversation.messages.map((msg, index) => (\r\n                            <div key={index} className={`message ${msg.sender === userProfile.userId ? 'sent' : 'received'}`}>\r\n                                {/* Display the sender's display name and the text message */}\r\n                                <div className=\"message-details\">\r\n                                    <strong>{msg.senderDisplayName}: </strong>{msg.text}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                        <div ref={messagesEndRef} />\r\n                    </div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={newMessage}\r\n                        onChange={(e) => setNewMessage(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                        className=\"message-input\"\r\n                    />\r\n                    <button onClick={handleSendMessage} className=\"send-button\">Send</button>\r\n                </>\r\n            ) : (\r\n                <p>Loading conversation or start a new chat...</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}