{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\n// Import necessary React hooks, router functionality, the MessageContext, and Socket.IO client.\nimport React, { useContext, useEffect, useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { MessageContext } from './MessageContext';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatRoom({\n  userProfile\n}) {\n  _s();\n  // Extract the conversation ID from the URL parameters.\n  const {\n    conversationId\n  } = useParams();\n  // Access the current conversation state and setter from the context.\n  const {\n    currentConversation,\n    setCurrentConversation\n  } = useContext(MessageContext);\n  // State for handling new message input from the user.\n  const [newMessage, setNewMessage] = useState(\"\");\n  // Reference for the scrollable area to ensure the view is moved to the latest message.\n  const messagesEndRef = useRef(null);\n  // State to manage the socket connection instance.\n  const [socket, setSocket] = useState(null);\n\n  // Connect to Socket.IO server when component mounts and clean up on unmount.\n  useEffect(() => {\n    const newSocket = io('http://localhost:8888'); // Connect to the Socket.IO server.\n    setSocket(newSocket); // Store the socket instance in state.\n\n    // Register the user with their userId when the socket connects.\n    newSocket.on('connect', () => {\n      newSocket.emit('register', userProfile.userId);\n    });\n\n    // Handle incoming messages.\n    newSocket.on('receiveMessage', message => {\n      console.log('Received message:', message);\n      // If the message belongs to the current conversation, add it to the conversation.\n      if (message.conversationId === conversationId) {\n        setCurrentConversation(prev => ({\n          ...prev,\n          messages: [...prev.messages, message]\n        }));\n      }\n    });\n\n    // Clean up by removing event listeners and closing the socket when the component unmounts.\n    return () => {\n      newSocket.off('connect');\n      newSocket.off('receiveMessage');\n      newSocket.close();\n    };\n  }, [conversationId, userProfile.userId]);\n\n  // Automatically scroll to the most recent message when the list of messages updates.\n  useEffect(() => {\n    if (currentConversation !== null && currentConversation !== void 0 && currentConversation.messages.length) {\n      var _messagesEndRef$curre;\n      (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation.messages]);\n\n  // Function to handle sending messages.\n  const handleSendMessage = () => {\n    if (newMessage.trim() !== \"\") {\n      // Emit a 'sendMessage' event to the server with the message data.\n      socket.emit('sendMessage', {\n        senderId: userProfile.userId,\n        senderDisplayName: userProfile.displayName,\n        text: newMessage,\n        conversationId: currentConversation._id\n      });\n\n      // Update local conversation state with the new message.\n      setCurrentConversation(prev => ({\n        ...prev,\n        messages: [...prev.messages, {\n          sender: userProfile.userId,\n          senderDisplayName: userProfile.displayName,\n          text: newMessage,\n          createdAt: new Date()\n        }]\n      }));\n\n      // Clear the input field.\n      setNewMessage(\"\");\n    }\n  };\n\n  // Fetch the specific conversation data when the component mounts or the conversationId changes.\n  useEffect(() => {\n    if (conversationId) {\n      fetch(`http://localhost:8888/api/conversations/${conversationId}`).then(response => response.json()).then(conversation => {\n        setCurrentConversation(conversation); // Set the fetched conversation into the state.\n      }).catch(error => console.error('Failed to fetch conversation:', error));\n    }\n  }, [conversationId, setCurrentConversation]);\n\n  // Render the chat interface.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"middle-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), currentConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [currentConversation.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender === userProfile.userId ? 'sent' : 'received'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [msg.senderDisplayName, \": \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this), msg.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading conversation or start a new chat...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatRoom, \"6sZ4iRUEieINxjy9RS/5DrJtyfs=\", false, function () {\n  return [useParams];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useRef","useParams","MessageContext","io","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatRoom","userProfile","_s","conversationId","currentConversation","setCurrentConversation","newMessage","setNewMessage","messagesEndRef","socket","setSocket","newSocket","on","emit","userId","message","console","log","prev","messages","off","close","length","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","senderId","senderDisplayName","displayName","text","_id","sender","createdAt","Date","fetch","then","response","json","conversation","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","ref","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/ChatRoom.js"],"sourcesContent":["// Import necessary React hooks, router functionality, the MessageContext, and Socket.IO client.\r\nimport React, { useContext, useEffect, useState, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { MessageContext } from './MessageContext';\r\nimport io from 'socket.io-client';\r\n\r\nfunction ChatRoom({ userProfile }) {\r\n    // Extract the conversation ID from the URL parameters.\r\n    const { conversationId } = useParams();\r\n    // Access the current conversation state and setter from the context.\r\n    const { currentConversation, setCurrentConversation } = useContext(MessageContext);\r\n    // State for handling new message input from the user.\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    // Reference for the scrollable area to ensure the view is moved to the latest message.\r\n    const messagesEndRef = useRef(null);\r\n    // State to manage the socket connection instance.\r\n    const [socket, setSocket] = useState(null);\r\n\r\n    // Connect to Socket.IO server when component mounts and clean up on unmount.\r\n    useEffect(() => {\r\n        const newSocket = io('http://localhost:8888');  // Connect to the Socket.IO server.\r\n        setSocket(newSocket);  // Store the socket instance in state.\r\n\r\n        // Register the user with their userId when the socket connects.\r\n        newSocket.on('connect', () => {\r\n            newSocket.emit('register', userProfile.userId);\r\n        });\r\n\r\n        // Handle incoming messages.\r\n        newSocket.on('receiveMessage', message => {\r\n            console.log('Received message:', message);\r\n            // If the message belongs to the current conversation, add it to the conversation.\r\n            if (message.conversationId === conversationId) {\r\n                setCurrentConversation(prev => ({\r\n                    ...prev,\r\n                    messages: [...prev.messages, message]\r\n                }));\r\n            }\r\n        });\r\n\r\n        // Clean up by removing event listeners and closing the socket when the component unmounts.\r\n        return () => {\r\n            newSocket.off('connect');\r\n            newSocket.off('receiveMessage');\r\n            newSocket.close();\r\n        };\r\n    }, [conversationId, userProfile.userId]);\r\n\r\n    // Automatically scroll to the most recent message when the list of messages updates.\r\n    useEffect(() => {\r\n        if (currentConversation?.messages.length) {\r\n            messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [currentConversation?.messages]);\r\n\r\n    // Function to handle sending messages.\r\n    const handleSendMessage = () => {\r\n        if (newMessage.trim() !== \"\") {\r\n            // Emit a 'sendMessage' event to the server with the message data.\r\n            socket.emit('sendMessage', {\r\n                senderId: userProfile.userId,\r\n                senderDisplayName: userProfile.displayName,\r\n                text: newMessage,\r\n                conversationId: currentConversation._id\r\n            });\r\n\r\n            // Update local conversation state with the new message.\r\n            setCurrentConversation(prev => ({\r\n                ...prev,\r\n                messages: [...prev.messages, {\r\n                    sender: userProfile.userId, \r\n                    senderDisplayName: userProfile.displayName, \r\n                    text: newMessage, \r\n                    createdAt: new Date()\r\n                }]\r\n            }));\r\n\r\n            // Clear the input field.\r\n            setNewMessage(\"\");\r\n        }\r\n    };\r\n\r\n    // Fetch the specific conversation data when the component mounts or the conversationId changes.\r\n    useEffect(() => {\r\n        if (conversationId) {\r\n            fetch(`http://localhost:8888/api/conversations/${conversationId}`)\r\n                .then(response => response.json())\r\n                .then(conversation => {\r\n                    setCurrentConversation(conversation);  // Set the fetched conversation into the state.\r\n                })\r\n                .catch(error => console.error('Failed to fetch conversation:', error));\r\n        }\r\n    }, [conversationId, setCurrentConversation]);\r\n\r\n    // Render the chat interface.\r\n    return (\r\n        <div className=\"middle-content\">\r\n            <h1>Chat</h1>\r\n            {currentConversation ? (\r\n                <>\r\n                    <div className=\"messages\">\r\n                        {/* Map through each message in the conversation and display them. */}\r\n                        {currentConversation.messages.map((msg, index) => (\r\n                            <div key={index} className={`message ${msg.sender === userProfile.userId ? 'sent' : 'received'}`}>\r\n                                <div className=\"message-details\">\r\n                                    <strong>{msg.senderDisplayName}: </strong>{msg.text}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                        <div ref={messagesEndRef} /> {/* Reference to scroll to the latest message. */}\r\n                    </div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={newMessage}\r\n                        onChange={(e) => setNewMessage(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                        className=\"message-input\"\r\n                    />\r\n                    <button onClick={handleSendMessage} className=\"send-button\">Send</button>\r\n                </>\r\n            ) : (\r\n                <p>Loading conversation or start a new chat...</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}