{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\FriendsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { MessageContext } from './MessageContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FriendsPage({\n  userProfile\n}) {\n  _s();\n  const {\n    conversations,\n    setConversations\n  } = useContext(MessageContext);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Ensure userProfile and userProfile.userId exist before making the API call\n    if (userProfile && userProfile.userId) {\n      axios.get('http://localhost:8888/api/conversations', {\n        params: {\n          userId: userProfile.userId\n        }\n      }).then(response => {\n        setConversations(response.data); // Assuming response.data is always an array, handle non-array responses accordingly\n      }).catch(error => {\n        console.error('Failed to fetch conversations:', error);\n        setConversations([]); // Ensure conversations is set to an empty array on error\n      });\n    }\n  }, [setConversations, userProfile]);\n  const handleSelectConversation = conversationId => {\n    navigate(`/chat/${conversationId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"middle-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Friends Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: conversations && conversations.length > 0 ? conversations.map(conversation => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSelectConversation(conversation._id),\n        children: [\"Chat with \", conversation.userDisplayName, \" - Last message at \", new Date(conversation.lastMessageAt).toLocaleTimeString()]\n      }, conversation._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No conversations yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n_s(FriendsPage, \"NLjr+QYuSETX/Z/MOu9Wn9UjNqI=\", false, function () {\n  return [useNavigate];\n});\n_c = FriendsPage;\nexport default FriendsPage;\nvar _c;\n$RefreshReg$(_c, \"FriendsPage\");","map":{"version":3,"names":["React","useContext","useEffect","useNavigate","MessageContext","axios","jsxDEV","_jsxDEV","FriendsPage","userProfile","_s","conversations","setConversations","navigate","userId","get","params","then","response","data","catch","error","console","handleSelectConversation","conversationId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","conversation","onClick","_id","userDisplayName","Date","lastMessageAt","toLocaleTimeString","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/FriendsPage.js"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { MessageContext } from './MessageContext';\r\nimport axios from 'axios';\r\n\r\nfunction FriendsPage({ userProfile }) {\r\n    const { conversations, setConversations } = useContext(MessageContext);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        // Ensure userProfile and userProfile.userId exist before making the API call\r\n        if (userProfile && userProfile.userId) {\r\n            axios.get('http://localhost:8888/api/conversations', {\r\n                params: { userId: userProfile.userId }\r\n            })\r\n            .then(response => {\r\n                setConversations(response.data); // Assuming response.data is always an array, handle non-array responses accordingly\r\n            })\r\n            .catch(error => {\r\n                console.error('Failed to fetch conversations:', error);\r\n                setConversations([]); // Ensure conversations is set to an empty array on error\r\n            });\r\n        }\r\n    }, [setConversations, userProfile]);\r\n\r\n    const handleSelectConversation = (conversationId) => {\r\n        navigate(`/chat/${conversationId}`);\r\n    };\r\n\r\n    return (\r\n        <div className=\"middle-content\">\r\n            <h1>Friends Page</h1>\r\n            <ul>\r\n                {conversations && conversations.length > 0 ? conversations.map((conversation) => (\r\n                    <li key={conversation._id} onClick={() => handleSelectConversation(conversation._id)}>\r\n                        Chat with {conversation.userDisplayName} - Last message at {new Date(conversation.lastMessageAt).toLocaleTimeString()}\r\n                    </li>\r\n                )) : <p>No conversations yet.</p>}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FriendsPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,WAAWA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GAAGX,UAAU,CAACG,cAAc,CAAC;EACtE,MAAMS,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ;IACA,IAAIO,WAAW,IAAIA,WAAW,CAACK,MAAM,EAAE;MACnCT,KAAK,CAACU,GAAG,CAAC,yCAAyC,EAAE;QACjDC,MAAM,EAAE;UAAEF,MAAM,EAAEL,WAAW,CAACK;QAAO;MACzC,CAAC,CAAC,CACDG,IAAI,CAACC,QAAQ,IAAI;QACdN,gBAAgB,CAACM,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;MACrC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDT,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACA,gBAAgB,EAAEH,WAAW,CAAC,CAAC;EAEnC,MAAMc,wBAAwB,GAAIC,cAAc,IAAK;IACjDX,QAAQ,CAAE,SAAQW,cAAe,EAAC,CAAC;EACvC,CAAC;EAED,oBACIjB,OAAA;IAAKkB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3BnB,OAAA;MAAAmB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBvB,OAAA;MAAAmB,QAAA,EACKf,aAAa,IAAIA,aAAa,CAACoB,MAAM,GAAG,CAAC,GAAGpB,aAAa,CAACqB,GAAG,CAAEC,YAAY,iBACxE1B,OAAA;QAA2B2B,OAAO,EAAEA,CAAA,KAAMX,wBAAwB,CAACU,YAAY,CAACE,GAAG,CAAE;QAAAT,QAAA,GAAC,YACxE,EAACO,YAAY,CAACG,eAAe,EAAC,qBAAmB,EAAC,IAAIC,IAAI,CAACJ,YAAY,CAACK,aAAa,CAAC,CAACC,kBAAkB,CAAC,CAAC;MAAA,GADhHN,YAAY,CAACE,GAAG;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAErB,CACP,CAAC,gBAAGvB,OAAA;QAAAmB,QAAA,EAAG;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAACpB,EAAA,CApCQF,WAAW;EAAA,QAECL,WAAW;AAAA;AAAAqC,EAAA,GAFvBhC,WAAW;AAsCpB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}