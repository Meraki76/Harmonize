{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\FeedPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form, Button, Card } from 'react-bootstrap';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FeedPage({\n  userProfile\n}) {\n  _s();\n  const [content, setContent] = useState('');\n  const [tags, setTags] = useState({\n    artist: '',\n    song: '',\n    album: ''\n  });\n  const [posts, setPosts] = useState([]); // State to store fetched posts\n\n  // Fetch posts from backend when component mounts\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get('http://localhost:8888/posts');\n        setPosts(response.data); // Set fetched posts to state\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n    fetchPosts();\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!userProfile) {\n      alert(\"You need to be logged in to post.\");\n      return;\n    }\n    try {\n      const post = {\n        content,\n        tags,\n        user: userProfile.spotifyId // Pass Spotify ID as the user reference\n      };\n      await axios.post('http://localhost:8888/posts', post);\n      setContent('');\n      setTags({\n        artist: '',\n        song: '',\n        album: ''\n      });\n      // Fetch posts again to update the list after posting\n      await fetchPosts();\n    } catch (error) {\n      console.error('Error creating post:', error);\n      alert('Failed to create post');\n    }\n  };\n\n  // Function to render each post\n  const renderPosts = () => {\n    return posts.map(post => /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: post.user.displayName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Subtitle, {\n          className: \"mb-2 text-muted\",\n          children: [\"Tags: \", post.tags.artist, \", \", post.tags.song, \", \", post.tags.album]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"middle-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Feed Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), renderPosts()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(FeedPage, \"PUDdPhvfZRcrcMqMJOJL5L6c184=\");\n_c = FeedPage;\nexport default FeedPage;\nvar _c;\n$RefreshReg$(_c, \"FeedPage\");","map":{"version":3,"names":["React","useState","useEffect","Container","Form","Button","Card","axios","jsxDEV","_jsxDEV","FeedPage","userProfile","_s","content","setContent","tags","setTags","artist","song","album","posts","setPosts","fetchPosts","response","get","data","error","console","handleSubmit","e","preventDefault","alert","post","user","spotifyId","renderPosts","map","className","children","Body","Title","displayName","fileName","_jsxFileName","lineNumber","columnNumber","Text","Subtitle","_id","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/FeedPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Form, Button, Card } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nfunction FeedPage({ userProfile }) {\r\n  const [content, setContent] = useState('');\r\n  const [tags, setTags] = useState({ artist: '', song: '', album: '' });\r\n  const [posts, setPosts] = useState([]); // State to store fetched posts\r\n\r\n  // Fetch posts from backend when component mounts\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8888/posts');\r\n        setPosts(response.data); // Set fetched posts to state\r\n      } catch (error) {\r\n        console.error('Error fetching posts:', error);\r\n      }\r\n    };\r\n    fetchPosts();\r\n  }, []); // Empty dependency array means this effect runs once on mount\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!userProfile) {\r\n      alert(\"You need to be logged in to post.\");\r\n      return;\r\n    }\r\n    try {\r\n      const post = {\r\n        content,\r\n        tags,\r\n        user: userProfile.spotifyId // Pass Spotify ID as the user reference\r\n      };\r\n      await axios.post('http://localhost:8888/posts', post);\r\n      setContent('');\r\n      setTags({ artist: '', song: '', album: '' });\r\n      // Fetch posts again to update the list after posting\r\n      await fetchPosts();\r\n    } catch (error) {\r\n      console.error('Error creating post:', error);\r\n      alert('Failed to create post');\r\n    }\r\n  };\r\n\r\n  // Function to render each post\r\n  const renderPosts = () => {\r\n    return posts.map((post) => (\r\n      <Card key={post._id} className=\"mb-3\">\r\n        <Card.Body>\r\n          <Card.Title>{post.user.displayName}</Card.Title>\r\n          <Card.Text>{post.content}</Card.Text>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">Tags: {post.tags.artist}, {post.tags.song}, {post.tags.album}</Card.Subtitle>\r\n          {/* Add buttons for likes and replies here if needed */}\r\n        </Card.Body>\r\n      </Card>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <Container className=\"middle-content\">\r\n      <h1>Feed Page</h1>\r\n      <Form onSubmit={handleSubmit}>\r\n        {/* Form groups for content and tags */}\r\n      </Form>\r\n      {/* Render posts */}\r\n      {renderPosts()}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default FeedPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,EAAEC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC/D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,QAAQA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC;IAAEgB,MAAM,EAAE,EAAE;IAAEC,IAAI,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;EACrE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMoB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,6BAA6B,CAAC;QAC/DH,QAAQ,CAACE,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IACDJ,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMM,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACnB,WAAW,EAAE;MAChBoB,KAAK,CAAC,mCAAmC,CAAC;MAC1C;IACF;IACA,IAAI;MACF,MAAMC,IAAI,GAAG;QACXnB,OAAO;QACPE,IAAI;QACJkB,IAAI,EAAEtB,WAAW,CAACuB,SAAS,CAAC;MAC9B,CAAC;MACD,MAAM3B,KAAK,CAACyB,IAAI,CAAC,6BAA6B,EAAEA,IAAI,CAAC;MACrDlB,UAAU,CAAC,EAAE,CAAC;MACdE,OAAO,CAAC;QAAEC,MAAM,EAAE,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC,CAAC;MAC5C;MACA,MAAMG,UAAU,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CK,KAAK,CAAC,uBAAuB,CAAC;IAChC;EACF,CAAC;;EAED;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxB,OAAOf,KAAK,CAACgB,GAAG,CAAEJ,IAAI,iBACpBvB,OAAA,CAACH,IAAI;MAAgB+B,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnC7B,OAAA,CAACH,IAAI,CAACiC,IAAI;QAAAD,QAAA,gBACR7B,OAAA,CAACH,IAAI,CAACkC,KAAK;UAAAF,QAAA,EAAEN,IAAI,CAACC,IAAI,CAACQ;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAAC,eAChDpC,OAAA,CAACH,IAAI,CAACwC,IAAI;UAAAR,QAAA,EAAEN,IAAI,CAACnB;QAAO;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACrCpC,OAAA,CAACH,IAAI,CAACyC,QAAQ;UAACV,SAAS,EAAC,iBAAiB;UAAAC,QAAA,GAAC,QAAM,EAACN,IAAI,CAACjB,IAAI,CAACE,MAAM,EAAC,IAAE,EAACe,IAAI,CAACjB,IAAI,CAACG,IAAI,EAAC,IAAE,EAACc,IAAI,CAACjB,IAAI,CAACI,KAAK;QAAA;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE/G;IAAC,GANHb,IAAI,CAACgB,GAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOb,CACP,CAAC;EACJ,CAAC;EAED,oBACEpC,OAAA,CAACN,SAAS;IAACkC,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBACnC7B,OAAA;MAAA6B,QAAA,EAAI;IAAS;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBpC,OAAA,CAACL,IAAI;MAAC6C,QAAQ,EAAErB;IAAa;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEvB,CAAC,EAENV,WAAW,CAAC,CAAC;EAAA;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEhB;AAACjC,EAAA,CAjEQF,QAAQ;AAAAwC,EAAA,GAARxC,QAAQ;AAmEjB,eAAeA,QAAQ;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}