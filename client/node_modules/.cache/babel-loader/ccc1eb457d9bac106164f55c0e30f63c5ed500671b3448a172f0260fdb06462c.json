{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { MessageContext } from './MessageContext';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatRoom({\n  userProfile\n}) {\n  _s();\n  const {\n    conversationId\n  } = useParams();\n  const {\n    currentConversation,\n    setCurrentConversation\n  } = useContext(MessageContext);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const messagesEndRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n\n  // Connect to Socket.IO server and clean up on unmount\n  useEffect(() => {\n    const newSocket = io('http://localhost:8888');\n    setSocket(newSocket);\n    return () => newSocket.close();\n  }, []);\n\n  // Fetch the specific conversation when the component mounts or the conversationId changes\n  useEffect(() => {\n    if (conversationId) {\n      fetch(`http://localhost:8888/api/conversations/${conversationId}`).then(response => response.json()).then(conversation => {\n        setCurrentConversation(conversation);\n      }).catch(error => console.error('Failed to fetch conversation:', error));\n    }\n  }, [conversationId, setCurrentConversation]);\n\n  // Listen for new messages via socket\n  useEffect(() => {\n    if (socket) {\n      socket.on('receiveMessage', message => {\n        if (message.conversationId === conversationId) {\n          // Update the conversation with the new message\n          setCurrentConversation(prev => ({\n            ...prev,\n            messages: [...prev.messages, message]\n          }));\n        }\n      });\n    }\n    return () => {\n      if (socket) {\n        socket.off('receiveMessage');\n      }\n    };\n  }, [socket, conversationId, setCurrentConversation]);\n\n  // Auto-scroll to the latest message\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation.messages.length]);\n  const handleSendMessage = () => {\n    if (newMessage.trim() !== \"\") {\n      const senderId = userProfile.userId; // Ensure this is correctly retrieved\n\n      // Emit the message and expect a callback for acknowledgment\n      socket.emit('sendMessage', {\n        senderId: senderId,\n        text: newMessage,\n        conversationId: currentConversation._id\n      }, response => {\n        // Handle the response here, such as confirming the message was sent or handling errors\n        if (response.status === 'ok') {\n          console.log('Message sent successfully');\n        } else {\n          console.error('Failed to send message:', response.message);\n        }\n      });\n      setNewMessage(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"middle-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Chat with \", (currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation.otherUserDisplayName) || \"User\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), currentConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [currentConversation.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.senderId === 'yourSenderId' ? 'sent' : 'received'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: msg.senderId === 'yourSenderId' ? 'yourProfileImage' : 'otherUserProfileImage',\n            alt: \"Profile\",\n            className: \"profile-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading conversation or start a new chat...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatRoom, \"3GOH3JtUct+8cYtxtiDnWXqpNag=\", false, function () {\n  return [useParams];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useRef","useParams","MessageContext","io","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatRoom","userProfile","_s","conversationId","currentConversation","setCurrentConversation","newMessage","setNewMessage","messagesEndRef","socket","setSocket","newSocket","close","fetch","then","response","json","conversation","catch","error","console","on","message","prev","messages","off","_messagesEndRef$curre","current","scrollIntoView","behavior","length","handleSendMessage","trim","senderId","userId","emit","text","_id","status","log","className","children","otherUserDisplayName","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","src","alt","ref","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/ChatRoom.js"],"sourcesContent":["import React, { useContext, useEffect, useState, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { MessageContext } from './MessageContext';\r\nimport io from 'socket.io-client';\r\n\r\nfunction ChatRoom({userProfile}) {\r\n    const { conversationId } = useParams();\r\n    const { currentConversation, setCurrentConversation } = useContext(MessageContext);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const messagesEndRef = useRef(null);\r\n    const [socket, setSocket] = useState(null);\r\n    \r\n    // Connect to Socket.IO server and clean up on unmount\r\n    useEffect(() => {\r\n        const newSocket = io('http://localhost:8888');\r\n        setSocket(newSocket);\r\n        return () => newSocket.close();\r\n    }, []);\r\n\r\n    // Fetch the specific conversation when the component mounts or the conversationId changes\r\n    useEffect(() => {\r\n        if (conversationId) {\r\n            fetch(`http://localhost:8888/api/conversations/${conversationId}`)\r\n                .then(response => response.json())\r\n                .then(conversation => {\r\n                    setCurrentConversation(conversation);\r\n                })\r\n                .catch(error => console.error('Failed to fetch conversation:', error));\r\n        }\r\n    }, [conversationId, setCurrentConversation]);\r\n\r\n    // Listen for new messages via socket\r\n    useEffect(() => {\r\n        if (socket) {\r\n            socket.on('receiveMessage', message => {\r\n                if (message.conversationId === conversationId) {\r\n                    // Update the conversation with the new message\r\n                    setCurrentConversation(prev => ({\r\n                        ...prev,\r\n                        messages: [...prev.messages, message]\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            if (socket) {\r\n                socket.off('receiveMessage');\r\n            }\r\n        };\r\n    }, [socket, conversationId, setCurrentConversation]);\r\n\r\n    // Auto-scroll to the latest message\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [currentConversation?.messages.length]);\r\n\r\n    const handleSendMessage = () => {\r\n        if (newMessage.trim() !== \"\") {\r\n            const senderId = userProfile.userId;  // Ensure this is correctly retrieved\r\n    \r\n            // Emit the message and expect a callback for acknowledgment\r\n            socket.emit('sendMessage', {\r\n                senderId: senderId,\r\n                text: newMessage,\r\n                conversationId: currentConversation._id\r\n            }, (response) => {\r\n                // Handle the response here, such as confirming the message was sent or handling errors\r\n                if (response.status === 'ok') {\r\n                    console.log('Message sent successfully');\r\n                } else {\r\n                    console.error('Failed to send message:', response.message);\r\n                }\r\n            });\r\n    \r\n            setNewMessage(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"middle-content\">\r\n            <h1>Chat with {currentConversation?.otherUserDisplayName || \"User\"}</h1>\r\n            {currentConversation ? (\r\n                <>\r\n                    <div className=\"messages\">\r\n                        {currentConversation.messages.map((msg, index) => (\r\n                            <div key={index} className={`message ${msg.senderId === 'yourSenderId' ? 'sent' : 'received'}`}>\r\n                                <img src={msg.senderId === 'yourSenderId' ? 'yourProfileImage' : 'otherUserProfileImage'} alt=\"Profile\" className=\"profile-image\"/>\r\n                                <p>{msg.text}</p>\r\n                            </div>\r\n                        ))}\r\n                        <div ref={messagesEndRef} />\r\n                    </div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={newMessage}\r\n                        onChange={(e) => setNewMessage(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                        className=\"message-input\"\r\n                    />\r\n                    <button onClick={handleSendMessage} className=\"send-button\">Send</button>\r\n                </>\r\n            ) : (\r\n                <p>Loading conversation or start a new chat...</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}