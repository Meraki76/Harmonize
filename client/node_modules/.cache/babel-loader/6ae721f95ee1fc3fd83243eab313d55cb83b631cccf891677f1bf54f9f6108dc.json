{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\MessageContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MessageContext = /*#__PURE__*/createContext();\nexport const MessageProvider = ({\n  children\n}) => {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [currentConversation, setCurrentConversation] = useState(null);\n  const socket = io('http://localhost:8888');\n  useEffect(() => {\n    socket.on('receiveMessage', ({\n      senderId,\n      message\n    }) => {\n      // Add received message to the appropriate conversation\n      setConversations(prevConversations => {\n        const newConversations = prevConversations.map(conversation => {\n          if (conversation.userId === senderId) {\n            return {\n              ...conversation,\n              messages: [...conversation.messages, message]\n            };\n          }\n          return conversation;\n        });\n        return newConversations;\n      });\n    });\n    return () => {\n      socket.off('receiveMessage');\n    };\n  }, []);\n  const sendMessage = ({\n    message,\n    to\n  }) => {\n    socket.emit('sendMessage', {\n      message,\n      to\n    });\n    // Update the current conversation locally\n    setConversations(prevConversations => {\n      const newConversations = prevConversations.map(conversation => {\n        if (conversation.userId === to) {\n          return {\n            ...conversation,\n            messages: [...conversation.messages, message]\n          };\n        }\n        return conversation;\n      });\n      return newConversations;\n    });\n  };\n  const selectConversation = userId => {\n    const conversation = conversations.find(c => c.userId === userId);\n    setCurrentConversation(conversation);\n  };\n  return /*#__PURE__*/_jsxDEV(MessageContext.Provider, {\n    value: {\n      conversations,\n      selectConversation,\n      sendMessage,\n      currentConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageProvider, \"/Yd6Ka9KUPh7/+Dkw8x3TuMFRn4=\");\n_c = MessageProvider;\nvar _c;\n$RefreshReg$(_c, \"MessageProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","io","jsxDEV","_jsxDEV","MessageContext","MessageProvider","children","_s","conversations","setConversations","currentConversation","setCurrentConversation","socket","on","senderId","message","prevConversations","newConversations","map","conversation","userId","messages","off","sendMessage","to","emit","selectConversation","find","c","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/MessageContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nexport const MessageContext = createContext();\r\n\r\nexport const MessageProvider = ({ children }) => {\r\n    const [conversations, setConversations] = useState([]);\r\n    const [currentConversation, setCurrentConversation] = useState(null);\r\n    const socket = io('http://localhost:8888');\r\n\r\n    useEffect(() => {\r\n        socket.on('receiveMessage', ({ senderId, message }) => {\r\n            // Add received message to the appropriate conversation\r\n            setConversations(prevConversations => {\r\n                const newConversations = prevConversations.map(conversation => {\r\n                    if (conversation.userId === senderId) {\r\n                        return { ...conversation, messages: [...conversation.messages, message] };\r\n                    }\r\n                    return conversation;\r\n                });\r\n                return newConversations;\r\n            });\r\n        });\r\n\r\n        return () => {\r\n            socket.off('receiveMessage');\r\n        };\r\n    }, []);\r\n\r\n    const sendMessage = ({ message, to }) => {\r\n        socket.emit('sendMessage', { message, to });\r\n        // Update the current conversation locally\r\n        setConversations(prevConversations => {\r\n            const newConversations = prevConversations.map(conversation => {\r\n                if (conversation.userId === to) {\r\n                    return { ...conversation, messages: [...conversation.messages, message] };\r\n                }\r\n                return conversation;\r\n            });\r\n            return newConversations;\r\n        });\r\n    };\r\n\r\n    const selectConversation = (userId) => {\r\n        const conversation = conversations.find(c => c.userId === userId);\r\n        setCurrentConversation(conversation);\r\n    };\r\n\r\n    return (\r\n        <MessageContext.Provider value={{ conversations, selectConversation, sendMessage, currentConversation }}>\r\n            {children}\r\n        </MessageContext.Provider>\r\n    );\r\n};\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,OAAO,MAAMC,cAAc,gBAAGN,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMO,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACW,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAMa,MAAM,GAAGX,EAAE,CAAC,uBAAuB,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACZY,MAAM,CAACC,EAAE,CAAC,gBAAgB,EAAE,CAAC;MAAEC,QAAQ;MAAEC;IAAQ,CAAC,KAAK;MACnD;MACAN,gBAAgB,CAACO,iBAAiB,IAAI;QAClC,MAAMC,gBAAgB,GAAGD,iBAAiB,CAACE,GAAG,CAACC,YAAY,IAAI;UAC3D,IAAIA,YAAY,CAACC,MAAM,KAAKN,QAAQ,EAAE;YAClC,OAAO;cAAE,GAAGK,YAAY;cAAEE,QAAQ,EAAE,CAAC,GAAGF,YAAY,CAACE,QAAQ,EAAEN,OAAO;YAAE,CAAC;UAC7E;UACA,OAAOI,YAAY;QACvB,CAAC,CAAC;QACF,OAAOF,gBAAgB;MAC3B,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAO,MAAM;MACTL,MAAM,CAACU,GAAG,CAAC,gBAAgB,CAAC;IAChC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAGA,CAAC;IAAER,OAAO;IAAES;EAAG,CAAC,KAAK;IACrCZ,MAAM,CAACa,IAAI,CAAC,aAAa,EAAE;MAAEV,OAAO;MAAES;IAAG,CAAC,CAAC;IAC3C;IACAf,gBAAgB,CAACO,iBAAiB,IAAI;MAClC,MAAMC,gBAAgB,GAAGD,iBAAiB,CAACE,GAAG,CAACC,YAAY,IAAI;QAC3D,IAAIA,YAAY,CAACC,MAAM,KAAKI,EAAE,EAAE;UAC5B,OAAO;YAAE,GAAGL,YAAY;YAAEE,QAAQ,EAAE,CAAC,GAAGF,YAAY,CAACE,QAAQ,EAAEN,OAAO;UAAE,CAAC;QAC7E;QACA,OAAOI,YAAY;MACvB,CAAC,CAAC;MACF,OAAOF,gBAAgB;IAC3B,CAAC,CAAC;EACN,CAAC;EAED,MAAMS,kBAAkB,GAAIN,MAAM,IAAK;IACnC,MAAMD,YAAY,GAAGX,aAAa,CAACmB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,MAAM,KAAKA,MAAM,CAAC;IACjET,sBAAsB,CAACQ,YAAY,CAAC;EACxC,CAAC;EAED,oBACIhB,OAAA,CAACC,cAAc,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEtB,aAAa;MAAEkB,kBAAkB;MAAEH,WAAW;MAAEb;IAAoB,CAAE;IAAAJ,QAAA,EACnGA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAElC,CAAC;AAAC3B,EAAA,CAhDWF,eAAe;AAAA8B,EAAA,GAAf9B,eAAe;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}