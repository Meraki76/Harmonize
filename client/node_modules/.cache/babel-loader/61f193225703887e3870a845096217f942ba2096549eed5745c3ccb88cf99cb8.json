{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\SearchContext.js\",\n  _s = $RefreshSig$();\n// Import necessary React functions for creating context and managing state.\nimport React, { createContext, useState } from 'react';\n\n// Create a new context for the search criteria. This will be used to provide and consume search data across components.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchContext = /*#__PURE__*/createContext();\n\n// Define the SearchProvider component which will wrap part of or the entire application to provide search context.\nexport const SearchProvider = ({\n  children\n}) => {\n  _s();\n  // useState hook to manage the search criteria state. It starts with an empty string indicating no initial search.\n  const [searchCriteria, setSearchCriteria] = useState('');\n\n  // The SearchProvider component returns a Context.Provider component that passes the searchCriteria and its setter function (setSearchCriteria)\n  // to all child components that consume this context.\n  return /*#__PURE__*/_jsxDEV(SearchContext.Provider, {\n    value: {\n      searchCriteria,\n      setSearchCriteria\n    },\n    children: [children, \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchProvider, \"Eycnca6k4aYDEXVWuukWKYTAOBA=\");\n_c = SearchProvider;\nvar _c;\n$RefreshReg$(_c, \"SearchProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","SearchContext","SearchProvider","children","_s","searchCriteria","setSearchCriteria","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/SearchContext.js"],"sourcesContent":["// Import necessary React functions for creating context and managing state.\r\nimport React, { createContext, useState } from 'react';\r\n\r\n// Create a new context for the search criteria. This will be used to provide and consume search data across components.\r\nexport const SearchContext = createContext();\r\n\r\n// Define the SearchProvider component which will wrap part of or the entire application to provide search context.\r\nexport const SearchProvider = ({ children }) => {\r\n    // useState hook to manage the search criteria state. It starts with an empty string indicating no initial search.\r\n    const [searchCriteria, setSearchCriteria] = useState('');\r\n\r\n    // The SearchProvider component returns a Context.Provider component that passes the searchCriteria and its setter function (setSearchCriteria)\r\n    // to all child components that consume this context.\r\n    return (\r\n        <SearchContext.Provider value={{ searchCriteria, setSearchCriteria }}>\r\n            {children}  {/* This allows all child components wrapped by SearchProvider to access and modify the search criteria as needed. */}\r\n        </SearchContext.Provider>\r\n    );\r\n};\r\n\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAAC,CAAC;;AAE5C;AACA,OAAO,MAAMK,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA;EACA,oBACIE,OAAA,CAACC,aAAa,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEH,cAAc;MAAEC;IAAkB,CAAE;IAAAH,QAAA,GAChEA,QAAQ,EAAC,IAAE;EAAA;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEjC,CAAC;AAACR,EAAA,CAXWF,cAAc;AAAAW,EAAA,GAAdX,cAAc;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}