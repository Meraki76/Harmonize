{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan Karrass\\\\Desktop\\\\harmonize\\\\client\\\\src\\\\MessageContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MessageContext = /*#__PURE__*/createContext();\nexport const MessageProvider = ({\n  children\n}) => {\n  _s();\n  const [currentConversation, setCurrentConversation] = useState(null);\n  const socket = io('http://localhost:8888');\n  useEffect(() => {\n    socket.on('receiveMessage', message => {\n      // Update the current conversation with the new message if it belongs to the same conversation\n      if (currentConversation && message.conversationId === currentConversation._id) {\n        setCurrentConversation(prev => ({\n          ...prev,\n          messages: [...prev.messages, message]\n        }));\n      }\n    });\n    return () => socket.off('receiveMessage');\n  }, [currentConversation]);\n  const sendMessage = ({\n    message,\n    to\n  }) => {\n    // Assume 'to' is the conversationId for clarity\n    socket.emit('sendMessage', {\n      message,\n      to,\n      conversationId: to\n    });\n  };\n  const fetchConversation = conversationId => {\n    fetch(`http://localhost:8888/api/conversations/${conversationId}`).then(response => response.json()).then(data => {\n      setCurrentConversation(data);\n    }).catch(error => {\n      console.error('Failed to fetch conversation:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(MessageContext.Provider, {\n    value: {\n      currentConversation,\n      fetchConversation,\n      sendMessage,\n      setCurrentConversation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageProvider, \"hTKZLkSZmzMldZkWRyRfI3ENDp0=\");\n_c = MessageProvider;\nvar _c;\n$RefreshReg$(_c, \"MessageProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","io","jsxDEV","_jsxDEV","MessageContext","MessageProvider","children","_s","currentConversation","setCurrentConversation","socket","on","message","conversationId","_id","prev","messages","off","sendMessage","to","emit","fetchConversation","fetch","then","response","json","data","catch","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dylan Karrass/Desktop/harmonize/client/src/MessageContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nexport const MessageContext = createContext();\r\n\r\nexport const MessageProvider = ({ children }) => {\r\n    const [currentConversation, setCurrentConversation] = useState(null);\r\n    const socket = io('http://localhost:8888');\r\n\r\n    useEffect(() => {\r\n        socket.on('receiveMessage', (message) => {\r\n            // Update the current conversation with the new message if it belongs to the same conversation\r\n            if (currentConversation && message.conversationId === currentConversation._id) {\r\n                setCurrentConversation(prev => ({\r\n                    ...prev,\r\n                    messages: [...prev.messages, message]\r\n                }));\r\n            }\r\n        });\r\n\r\n        return () => socket.off('receiveMessage');\r\n    }, [currentConversation]);\r\n\r\n    const sendMessage = ({ message, to }) => {\r\n        // Assume 'to' is the conversationId for clarity\r\n        socket.emit('sendMessage', { message, to, conversationId: to });\r\n    };\r\n\r\n    const fetchConversation = (conversationId) => {\r\n        fetch(`http://localhost:8888/api/conversations/${conversationId}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setCurrentConversation(data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Failed to fetch conversation:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <MessageContext.Provider value={{\r\n            currentConversation,\r\n            fetchConversation,\r\n            sendMessage,\r\n            setCurrentConversation\r\n        }}>\r\n            {children}\r\n        </MessageContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,OAAO,MAAMC,cAAc,gBAAGN,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMO,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAMW,MAAM,GAAGT,EAAE,CAAC,uBAAuB,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACZU,MAAM,CAACC,EAAE,CAAC,gBAAgB,EAAGC,OAAO,IAAK;MACrC;MACA,IAAIJ,mBAAmB,IAAII,OAAO,CAACC,cAAc,KAAKL,mBAAmB,CAACM,GAAG,EAAE;QAC3EL,sBAAsB,CAACM,IAAI,KAAK;UAC5B,GAAGA,IAAI;UACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEJ,OAAO;QACxC,CAAC,CAAC,CAAC;MACP;IACJ,CAAC,CAAC;IAEF,OAAO,MAAMF,MAAM,CAACO,GAAG,CAAC,gBAAgB,CAAC;EAC7C,CAAC,EAAE,CAACT,mBAAmB,CAAC,CAAC;EAEzB,MAAMU,WAAW,GAAGA,CAAC;IAAEN,OAAO;IAAEO;EAAG,CAAC,KAAK;IACrC;IACAT,MAAM,CAACU,IAAI,CAAC,aAAa,EAAE;MAAER,OAAO;MAAEO,EAAE;MAAEN,cAAc,EAAEM;IAAG,CAAC,CAAC;EACnE,CAAC;EAED,MAAME,iBAAiB,GAAIR,cAAc,IAAK;IAC1CS,KAAK,CAAE,2CAA0CT,cAAe,EAAC,CAAC,CAC7DU,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACVjB,sBAAsB,CAACiB,IAAI,CAAC;IAChC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACzD,CAAC,CAAC;EACV,CAAC;EAED,oBACIzB,OAAA,CAACC,cAAc,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAC5BvB,mBAAmB;MACnBa,iBAAiB;MACjBH,WAAW;MACXT;IACJ,CAAE;IAAAH,QAAA,EACGA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAElC,CAAC;AAAC5B,EAAA,CA5CWF,eAAe;AAAA+B,EAAA,GAAf/B,eAAe;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}